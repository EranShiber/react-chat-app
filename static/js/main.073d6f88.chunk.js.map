{"version":3,"sources":["Components/Input.js","Components/OnlineUsers.js","Layouts/Header.js","Components/Message.js","Layouts/MessageBoard.js","App.js","confing.js","serviceWorker.js","index.js"],"names":["Input","react_default","a","createElement","className","onSubmit","this","props","sendMessage","type","placeholder","onChange","hendleInputChange","React","Component","OnlineUsers","Header","Message","_this","console","log","currectUser","message","map","x","createdAt","MessageBoard","Components_Message","App","state","messages","userType","e","preventDefault","text","roomId","setState","target","value","_this2","Chatkit","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","subscribeToRoom","hooks","onNewMessage","concat","Object","toConsumableArray","Layouts_Header","Layouts_MessageBoard","Components_OnlineUsers","Components_Input","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gQAiBeA,mLAZP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,QAAME,SAAUC,KAAKC,MAAMC,aACvBP,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OACXC,YAAY,qBACTC,SAAUL,KAAKC,MAAMK,6BARrBC,IAAMC,WCSXC,mLAPP,OACId,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,sBAHcS,IAAMC,WCSjBE,mLAPP,OACIf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,mBAHSS,IAAMC,WCiBZG,mLAhBF,IAAAC,EAAAZ,KAGL,OAFIa,QAAQC,IAAId,KAAKC,MAAMc,aAGvBpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACVE,KAAKC,MAAMe,QAAQC,IAAI,SAAAC,GACpB,OAAOvB,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,uBACNF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAYH,EAAAC,EAAAC,cAAA,gBAAQe,EAAKX,MAAMc,YAAYI,YAC/DxB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBoB,cAV9BX,IAAMC,WCUbY,mLAPP,OACIzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZH,EAAAC,EAAAC,cAACwB,EAAD,CAASL,QAAShB,KAAKC,MAAMe,QAAUD,YAAaf,KAAKC,MAAMc,sBAJnDR,IAAMC,WCgElBc,6MAxDbC,MAAQ,CACJC,SAAU,GACVC,SAAU,MA2BZvB,YAAc,SAACwB,GACbA,EAAEC,iBACFf,EAAKG,YAAYb,YAAY,CAC3B0B,KAAMhB,EAAKW,MAAME,SACjBI,OAAQ,cAGZvB,kBAAoB,SAACoB,GACnBd,EAAKkB,SAAS,CAACL,SAAUC,EAAEK,OAAOC,4FA/BlB,IAAAC,EAAAjC,KACE,IAAIkC,IAAQC,YAAY,CAC1CC,gBCjBkB,8CDkBlBC,OAAQ,QACRC,cAAe,IAAIJ,IAAQK,cAAc,CACvCC,ICrBS,kHDyBDC,UACTC,KAAK,SAAA3B,GACJkB,EAAKlB,YAAcA,EACnBA,EAAY4B,gBAAgB,CAC1Bd,OAAQ,SACRe,MAAO,CACLC,aAAc,SAAA7B,GACZiB,EAAKH,SAAS,CAAEN,SAAQ,GAAAsB,OAAAC,OAAAC,EAAA,EAAAD,CAAMd,EAAKV,MAAMC,UAAjB,CAA2BR,EAAQY,gDAqBrE,OACEjC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoD,EAAD,MACAtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACqD,EAAD,CAAclC,QAAShB,KAAKuB,MAAMC,SAAUT,YAAaf,KAAKe,cAC9DpB,EAAAC,EAAAC,cAACsD,EAAD,MACAxD,EAAAC,EAAAC,cAACuD,EAAD,CAAOlD,YAAaF,KAAKE,YAAaI,kBAAmBN,KAAKM,6BAlDtDE,aEEE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.073d6f88.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Input extends React.Component {\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"input\">\r\n            <form onSubmit={this.props.sendMessage}>\r\n                <input type=\"text\"\r\n                 placeholder=\"Enter a message...\"\r\n                    onChange={this.props.hendleInputChange}\r\n                 />\r\n            </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Input ","import React from 'react';\r\n\r\nclass OnlineUsers extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"online-users\">\r\n                OnlineUsers\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default OnlineUsers ","import React from 'react';\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"header\">\r\n                Chatifiy\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Header ","import React from 'react';\r\n\r\nclass Message extends React.Component {\r\n    render() {   \r\n            console.log(this.props.currectUser);\r\n            \r\n        return (\r\n            <div className=\"chat-container\">\r\n                {this.props.message.map(x=> {\r\n                    return <div> \r\n                        <span><stron>User:</stron></span>\r\n                        <span className=\"main-date\"><i> At:{this.props.currectUser.createdAt}</i></span>\r\n                    <span className=\"chat-message\">{x}</span>\r\n                    </div>\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Message ","import React from 'react';\r\nimport Message from '../Components/Message';\r\n\r\nclass MessageBoard extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"message-board\">\r\n               <Message message={this.props.message}  currectUser={this.props.currectUser}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default MessageBoard ","import React, { Component } from 'react';\nimport './App.css';\nimport Chatkit from '@pusher/chatkit'\nimport Input from './Components/Input'\nimport OnlineUsers from './Components/OnlineUsers'\nimport Header from './Layouts/Header'\nimport MessageBoard from './Layouts/MessageBoard'\n\nimport {tokenUrl, instanceLocator} from './confing'\n\nclass App extends Component {\n  state = {\n      messages: [],\n      userType: ''\n    }\n \n\n  componentDidMount() {\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator,\n      userId: \"eranz\",\n      tokenProvider: new Chatkit.TokenProvider({\n        url: tokenUrl\n      })   \n    });\n\n    chatManager.connect()\n      .then(currectUser => {\n        this.currectUser = currectUser\n        currectUser.subscribeToRoom({\n          roomId: 19385290,\n          hooks: {\n            onNewMessage: message => {     \n              this.setState({ messages: [...this.state.messages, message.text] })\n            }\n          }     \n        })\n      })\n    }\n    \n    sendMessage = (e) => {\n      e.preventDefault()\n      this.currectUser.sendMessage({\n        text: this.state.userType,\n        roomId: 19385290\n      })\n    }   \n    hendleInputChange = (e) => {\n      this.setState({userType: e.target.value})\n      \n    }\n  \n  \n  render() {   \n    return (\n      <div>\n        <Header />\n        <div className=\"main-container\">\n          <MessageBoard message={this.state.messages} currectUser={this.currectUser}/>\n          <OnlineUsers />\n          <Input sendMessage={this.sendMessage} hendleInputChange={this.hendleInputChange}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","\r\nconst tokenUrl = \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/0d53c1c3-821f-4931-b4e1-b4fa2567b3f2/token\";\r\nconst instanceLocator = \"v1:us1:0d53c1c3-821f-4931-b4e1-b4fa2567b3f2\";\r\n\r\nexport { tokenUrl, instanceLocator }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}